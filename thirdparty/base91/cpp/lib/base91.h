#ifndef BASE91_H
#define BASE91_H

#include <string>

class Base91 {
public:
    Base91() = default;
    explicit Base91(std::string _data) : data_(std::move(_data)){};
    Base91(const Base91 &base91) {
        data_ = base91.data_;
    }
    Base91(Base91 &&base91) noexcept {
        data_ = base91.data_;
        base91.data_.clear();
    }
    Base91 &operator=(const Base91 &rhs) {
        if (this != &rhs) { data_ = rhs.data_; }
        return *this;
    }
    Base91 &operator=(Base91 &&rhs) noexcept {
        if (this != &rhs) { data_ = rhs.data_; }
        return *this;
    }

    void encode(const std::string_view &data);
    void decode(const std::string_view &data);

    void setData(const std::string_view &_data) { data_ = _data; }
    [[nodiscard]] auto getData() const { return data_; }

private:
    std::string data_;

private:
    static constexpr uint8_t b91word_bit_c = 13;
    static constexpr char basicAlphabet_c[91] = {
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', //00..12
            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', //13..25
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', //26..38
            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', //39..51
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '#', '$', //52..64
            '%', '&', '(', ')', '*', '+', ',', '.', '/', ':', ';', '-', '=', //65..77
            '\\', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '\''//78..90
    };

    static constexpr uint8_t decAlphabet_c[256] = {
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//000..015
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//016..031
            91, 62, 91, 63, 64, 65, 66, 90, 67, 68, 69, 70, 71, 76, 72, 73,//032..047 // @34: ", @39: ', @45: -
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 74, 75, 91, 77, 91, 79,//048..063 // @60: <, @62: >
            80, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,          //064..079
            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 81, 78, 82, 83, 84,//080..095 // @92: slash
            85, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,//096..111
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 86, 87, 88, 89, 91,//112..127
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//128..143
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//144..159
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//160..175
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//176..191
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//192..207
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//208..223
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,//224..239
            91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 //240..255
    };
};

#endif//BASE91_H